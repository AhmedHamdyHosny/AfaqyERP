@model Afaqy_Store.Models.DeliveryRequestCreateBindModel
@using Classes.Helper;
@using Newtonsoft.Json;
@using BeyondThemes.Bootstrap;

@{
    ViewBag.Title = Resources.Store.DeliveryRequestCreate;
    Layout = "~/Views/Shared/_Popup.cshtml";
}


<link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.min.css" />
<link rel="stylesheet" href="~/Content/css/1.custom-style/AngularDDL.css" />

<style>
    .row-dropdownlist
    {
        height: 22px;
        padding: 0px 5px;
    }
    .gridcustom-select {
        position:absolute;
        height:22px;
        width: 37%
    }
    .gridcustom-select.open > a.dropdown-toggle {
        line-height: 22px;
    }
    .gridcustom-select > a.dropdown-toggle {
        height:22px;
        line-height:22px;
    }
</style>

<div class="modal-header">
    <button type="button" class="close" ng-click="cancel()" aria-hidden="true">&times;</button>
    <h2 class="modal-title">@Resources.Store.DeliveryRequestNew</h2>
</div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "form" }))
{
    <div class="modal-body withVScroll" >
        @Html.AntiForgeryToken()
        <div ng-init="bindGirdData()">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="row">
                <div class="col-xs-6 form-group">
                    @Html.LabelFor(model => model.POS_ps_code, Resources.Sales.POS, htmlAttributes: new { @class = "text-info" })
                    @if (((IEnumerable<CustomSelectListItem>)ViewBag.POSId).Count() < 2)
                    {
                        @Html.CustomDropdownListFor(model => model.POS_ps_code, (IEnumerable<CustomSelectListItem>)ViewBag.POSId, null, null, htmlAttributes: new { @class = "form-control", @readOnly = "true" })
                    }
                    else
                    {
                        @Html.CustomDropdownListFor(model => model.POS_ps_code, (IEnumerable<CustomSelectListItem>)ViewBag.POSId, null, Resources.Resource.SelectItem, htmlAttributes: new { @class = "form-control" })
                    }
                    
                    @Html.ValidationMessageFor(model => model.POS_ps_code, "", new { @class = "text-danger" })
                </div>
                <div class="col-xs-6 form-group">
                    @Html.LabelFor(model => model.Warehouse_wa_code, Resources.Adminstration.Warehouse, htmlAttributes: new { @class = "text-info" })
                    @if (((IEnumerable<CustomSelectListItem>)ViewBag.WarehouseId).Count() < 2)
                    {
                        @Html.CustomDropdownListFor(model => model.Warehouse_wa_code, (IEnumerable<CustomSelectListItem>)ViewBag.WarehouseId, null, null, htmlAttributes: new { @class = "form-control", @readOnly = "true" })
                    }
                    else
                    {
                        @Html.CustomDropdownListFor(model => model.Warehouse_wa_code, (IEnumerable<CustomSelectListItem>)ViewBag.WarehouseId, null, Resources.Resource.SelectItem, htmlAttributes: new { @class = "form-control" })
                    }
                    @Html.ValidationMessageFor(model => model.Warehouse_wa_code, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="row">
                <div class="col-xs-6 form-group"> 
                    @Html.LabelFor(model => model.SaleTransactionTypeId, Resources.Sales.SaleTransactionType, htmlAttributes: new { @class = "text-info" })
                    @Html.CustomDropdownListFor(model => model.SaleTransactionTypeId, (IEnumerable<CustomSelectListItem>)ViewBag.SaleTransactionTypeId, null, null, htmlAttributes: new { @class = "form-control", @name = "SaleTransactionTypeId", @id = "SaleTransactionTypeId" })
                    @Html.ValidationMessageFor(model => model.SaleTransactionTypeId, "", new { @class = "text-danger" })
                </div>
                <div class="col-xs-6 form-group"> 
                    @Html.LabelFor(model => model.Customer_aux_id, Resources.ServerManagement.Customer, htmlAttributes: new { @class = "text-info" })
                    <div id="customerDiv" custom-select="item as item.Text for item in customers | filter: $searchTerm" ng-model="selectCustomer" ng-init="bindCustomers()" ng-change="bindCustomerContacts(selectCustomer)" autofocus></div>
                    @Html.HiddenFor(model => model.Customer_aux_id, htmlAttributes: new { data_ng_value = "selectCustomer.Value" })
                    @Html.HiddenFor(model => model.CustomerName, htmlAttributes: new { data_ng_value = "selectCustomer.Text" } )
                    @Html.ValidationMessageFor(model => model.Customer_aux_id, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="row">
                <div class="col-xs-6 form-group">
                    @Html.LabelFor(model => model.CustomerContact_serial, Resources.Sales.CustomerContact, htmlAttributes: new { @class = "text-info" })
                    <div custom-select="item.serial as item.contact_name for item in customerContacts | filter: $searchTerm" ng-model="selectCustomerContact" ng-init="bindCustomerContacts()" autofocus></div>
                    @Html.HiddenFor(model => model.CustomerContact_serial, htmlAttributes: new { data_ng_value = "selectCustomerContact" })
                    @Html.ValidationMessageFor(model => model.CustomerContact_serial, "", new { @class = "text-danger" })
                </div>
                <div class="col-xs-6 form-group">
                    @Html.LabelFor(model => model.SystemId, Resources.ServerManagement.System, htmlAttributes: new { @class = "text-info" })
                    <div custom-select="item.Value as item.Text for item in systems | filter: $searchTerm" ng-model="selectSystem" ng-init="bindSystems()" autofocus></div>
                    @Html.HiddenFor(model => model.SystemId, htmlAttributes: new { data_ng_value = "selectSystem" })
                </div>
            </div>
            <div class="row">
                <div class="col-xs-6 form-group">
                    @Html.LabelFor(model => model.AlternativeContactName, Resources.Sales.AlternativeContactName, htmlAttributes: new { @class = "text-info" })
                    @Html.EditorFor(model => model.AlternativeContactName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.AlternativeContactName, "", new { @class = "text-danger" })
                </div>
                <div class="col-xs-6 form-group">
                    @Html.LabelFor(model => model.AlternativeContactTelephone, Resources.Sales.AlternativeContactTelephone, htmlAttributes: new { @class = "text-info" })
                    @Html.EditorFor(model => model.AlternativeContactTelephone, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.AlternativeContactTelephone, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="row">
                <div class="col-xs-3  form-group">
                    <label class="text-info" >@Resources.Store.DeliveryDate</label>
                    <span class="input-icon icon-right">
                        <input name="DeliveryRequestDate_Str" class="form-control date-picker" id="DeliveryRequestDate_Str" type="text" data-date-format="dd/mm/yyyy">
                        <i class="fa fa-calendar"></i>
                    </span>
                </div>
                <div class="col-xs-3 form-group">
                    <label class="text-info" >@Resources.Store.DeliveryTime</label>
                    <div class="input-group">
                        <input class="form-control" id="DeliveryRequestTime_Str" name="DeliveryRequestTime_Str" type="text">
                        <span class="input-group-addon">
                            <i class="fa fa-clock-o"></i>
                        </span>
                    </div>
                </div>
                <div class="col-xs-6 form-group">
                    @Html.LabelFor(model => model.Note, Resources.Store.DeliveryRequestNote, htmlAttributes: new { @class = "text-info" })
                    @Html.EditorFor(model => model.Note, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Note, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="row">
                <div class="col-xs-6 form-group">
                    @Html.Bootstrap().CheckBoxFor(model => model.WithInstallationService).Text(Resources.Store.WithInstallationService).IsChecked(true).HtmlAttributes(new { @class = "colored-danger" })
                </div>
            </div>

            <div class="table-toolbar">
                <a ng-click="create()" class="btn purple" id="addBtn">
                    <i class="fa fa-plus"></i> @Resources.Resource.ButtonAdd
                </a>
                <a ng-click="DeleteItems($event);" class="btn btn-danger">
                    <i class="fa fa-times"></i> @Resources.Resource.ButtonDelete
                </a>
            </div>
            <div class="form-group">
                @{ Html.RenderAction("Partial_Grid", "Common", new { EnablePagination = false}); }
            </div>
        </div>
    </div>
    <div class="modal-footer">
        <input type="submit" value="@Resources.Resource.ButtonSave" class="btn btn-success" />
        <button class="btn btn-default" type="button" ng-click="cancel()" >@Resources.Resource.ButtonCancel</button>
    </div>
}

@section scripts {
    <!--Bootstrap Date Picker-->
    <script src="~/Content/js/datetime/bootstrap-datepicker.js"></script>
    <!--Bootstrap Time Picker-->
    <script src="~/Content/js/datetime/bootstrap-timepicker.js"></script>
     <!--View JS References-->
    <script src="~/Content/js/1.custom-js/Views/CustomerContact.js"></script>

    <script>
        var customers = @Html.Raw(JsonConvert.SerializeObject((IEnumerable<CustomSelectListItem>)ViewBag.CustomerId).Replace("'", @"\'"));
        var systems = @Html.Raw(JsonConvert.SerializeObject((IEnumerable<CustomSelectListItem>)ViewBag.SystemId).Replace("'", @"\'"));
        var itemFamilies = @Html.Raw(JsonConvert.SerializeObject(((List<SelectListItem>)ViewBag.ItemFamilies)));
        var modelTypes = @Html.Raw(JsonConvert.SerializeObject(((List<SelectListItem>)ViewBag.ModelTypes)));
        //console.log(modelTypes);

        $(document).ready(function () {
            //--Bootstrap Date Picker--
            $('.date-picker').datepicker({startDate: new Date()});
            //--Bootstrap Time Picker--
            $('#DeliveryRequestTime_Str').timepicker();

            $('#form').submit(function (event) {
                if (!$(this).valid()) {
                    event.preventDefault();
                }
            });
        });
    </script>
}




