@model IEnumerable<Afaqy_Store.DataLayer.Device>
@using Newtonsoft.Json
@using BeyondThemes.Bootstrap;
@using Classes.Utilities;
@using Classes.Common;

@{
    ViewBag.Title = Resources.Store.DeviceTitle;
    Layout = "~/Views/Shared/_Default.cshtml";
}

<style>
    /*.grid {
    width: 500px;
    height: 400px;
}*/
.my-custom-menu {
    position: absolute;
}

.my-custom-menu .ui-grid-menu {
    padding: 0px;
}

.my-custom-menu .ui-grid-menu-inner {
    -webkit-box-shadow: none;
    box-shadow: none;
}

.ui-grid-menu-button {
height: 31px;
}

.action-edit{
    margin-right:5px;
    margin-left:5px;
}
</style>

<br />
<div class="row" ng-controller="DeviceCtrl">
    <div class="col-xs-12 col-md-12">
        <div class="widget">
            <div class="widget-header ">
                <span class="widget-caption">@Resources.Store.Devices</span>
                <div class="widget-buttons">
                    <a href="javascript:void(0);" data-toggle="maximize">
                        <i class="fa fa-expand"></i>
                    </a>
                    <a href="javascript:void(0);" data-toggle="collapse">
                        <i class="fa fa-minus"></i>
                    </a>
                    <a href="javascript:void(0);" data-toggle="dispose">
                        <i class="fa fa-times"></i>
                    </a>
                </div>
            </div>
            <div class="widget-body">
                @{
                    //check for alert messages
                    if (ViewBag.AlertMessage != null)
                    {
                        var alertMessage = (AlertMessage)ViewBag.AlertMessage;
                        switch (alertMessage.MessageType)
                        {
                            case Enums.AlertMessageType.Success:
                                using (Html.Bootstrap().Begin(new Alert().HtmlAttributes(new { id="alert"}).Style(AlertColor.Success).Closeable()))
                                {
                                    <i class="fa-fw fa fa-check"></i>
                                    <strong>@Resources.Resource.AlertSuccess</strong> <span>@alertMessage.MessageContent</span>
                                }
                                break;
                            case Enums.AlertMessageType.Error:
                                using (Html.Bootstrap().Begin(new Alert().HtmlAttributes(new { id = "alert" }).Style(AlertColor.Error).Closeable()))
                                {
                                    <i class="fa-fw fa fa-times"></i>
                                    <strong>@Resources.Resource.AlertError</strong> <span>@alertMessage.MessageContent</span>
                                }
                                break;
                            case Enums.AlertMessageType.Warning:
                                using (Html.Bootstrap().Begin(new Alert().HtmlAttributes(new { id = "alert" }).Style(AlertColor.Warning).Closeable()))
                                {
                                    <i class="fa-fw fa fa-warning"></i>
                                    <strong>@Resources.Resource.AlertWarning</strong> <span>@alertMessage.MessageContent</span>
                                }
                                break;
                            case Enums.AlertMessageType.info:
                                using (Html.Bootstrap().Begin(new Alert().HtmlAttributes(new { id = "alert" }).Style(AlertColor.Info).Closeable()))
                                {
                                    <i class="fa-fw fa fa-info"></i>
                                    <strong>@Resources.Resource.AlertInfo</strong> <span>@alertMessage.MessageContent</span>
                                }
                                break;
                            default:
                                break;
                        }
                    }
                }
                
                <div class="table-toolbar">
                    @using (Html.BeginForm("Import", "Device", FormMethod.Post, new { enctype = "multipart/form-data", id = "importForm", style = "display:none;" }))
                    {
                        <input type="file" id="upload" name="file" class="upload" onchange="fileChange(this)" accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel">
                        <button type="submit" id="btnImportExcel"></button>
                    }
                    <a  ng-click="create()" class="btn purple" id="addBtn"> 
                        <i class="fa fa-plus"></i> @Resources.Resource.ButtonAdd
                    </a>
                    <a  ng-click="DeleteItems($event);" class="btn btn-danger">
                        <i class="fa fa-times"></i> @Resources.Resource.ButtonDelete
                    </a>
                    <div class="btn-group pull-right">
                        <a class="btn btn-default" href="javascript:void(0);">@Resources.Resource.Tools</a>
                        <a class="btn btn-default dropdown-toggle" data-toggle="dropdown" href="javascript:void(0);"><i class="fa fa-angle-down"></i></a>
                        <ul class="dropdown-menu dropdown-default">
                            <li>
                                <a href="javascript:void(0);" onclick="showImportDilogFile()" >@Resources.Resource.Import</a>
                            </li>
                            <li>
                                <a href="@Url.Action("Export")">@Resources.Resource.Export</a>
                            </li>
                            <li>
                                <a href="javascript:void(0)" ng-click="ToggoleGridFilter();">Toggole Filtering </a> 
                            </li>
                        </ul>
                    </div>
                </div>
                <div id="grid" ui-grid="gridOptions"  ui-grid-exporter ui-grid-selection class="grid"></div>
            </div>
        </div>
    </div>
</div>

@section scripts{
    
    <script src="~/Content/js/bootbox/bootbox.js"></script>
    <script src="~/Content/js/Utilities/Utility.js"></script>
    

    @*<script src="~/Content/js/angular/angular.min.js"></script>*@

    <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.5.0/angular.js"></script>
    <script src="~/Content/js/angular/angular-touch.min.js"></script>
    <script src="~/Content/js/angular/angular-animate.min.js"></script>
    <script src="~/Content/js/angular/csv.js"></script>
    <script src="~/Content/js/angular/pdfmake.js"></script>
    <script src="~/Content/js/angular/vfs_fonts.js"></script>
    <script src="~/Content/js/angular/ui-bootstrap-tpls-2.4.0.min.js"></script>
    <script src="~/Content/js/angular/ui-grid.js"></script>
    <link rel="stylesheet" type="text/css" href="~/Content/css/angular/ui-grid.css">
    
    @*<script src="~/Content/js/angular/services.js"></script>*@

    <script>

        $(document).ready(function () {
            showAlert();
        });

        var app = angular.module('app', ['ngTouch', 'ui.grid', 'ui.grid.exporter', 'ui.grid.selection', 'ui.bootstrap']);
        app.service('confirmService', ['$uibModal',
            function ($uibModal) {
                var modalDefaults = {
                    backdrop: true,
                    keyboard: true,
                    modalFade: true,
                    templateUrl: '/Templates/Confirm.html'
                };

                var modalOptions = {
                    closeButtonText: 'Close',
                    actionButtonText: 'OK',
                    headerText: 'Proceed?',
                    bodyText: 'Perform this action?'
                };

                this.showModal = function (customModalDefaults, customModalOptions) {
                    if (!customModalDefaults) customModalDefaults = {};
                    customModalDefaults.backdrop = 'static';
                    return this.show(customModalDefaults, customModalOptions);
                };

                this.show = function (customModalDefaults, customModalOptions) {
                    //Create temp objects to work with since we're in a singleton service
                    var tempModalDefaults = {};
                    var tempModalOptions = {};

                    //Map angular-ui modal custom defaults to modal defaults defined in service
                    angular.extend(tempModalDefaults, modalDefaults, customModalDefaults);

                    //Map modal.html $scope custom properties to defaults defined in service
                    angular.extend(tempModalOptions, modalOptions, customModalOptions);

                    if (!tempModalDefaults.controller) {
                        tempModalDefaults.controller = function ($scope, $uibModalInstance) {
                            $scope.modalOptions = tempModalOptions;
                            $scope.modalOptions.ok = function (result) {
                                $uibModalInstance.close(result);
                            };
                            $scope.modalOptions.close = function (result) {
                                $uibModalInstance.dismiss('cancel');
                            };
                        }
                    }

                    return $uibModal.open(tempModalDefaults).result;
                };

            }]);
        app.controller('DeviceCtrl', ['$scope', '$uibModal', 'confirmService', '$http', '$interval', '$q', 'uiGridConstants', function ($scope, $uibModal, confirmService, $http, $interval, $q, uiGridConstants) {

            var fakeI18n = function (title) {
                var deferred = $q.defer();
                $interval(function () {
                    deferred.resolve('col: ' + title);
                }, 1000, 1);
                return deferred.promise;
            };

            $scope.gridOptions = {
                enableFiltering: true,
                exporterMenuCsv: true,
                enableGridMenu: true,
                gridMenuTitleFilter: fakeI18n,
                columnDefs: [
                    { field: 'SerialNumber', name: '@Resources.Store.DeviceSerialNumber' },
                    { field: 'IMEI', name: '@Resources.Store.DeviceIMEI' },
                    { field: 'DeviceModelType.ModelTypeName', name: '@Resources.Store.DeviceModelType' },
                    { field: 'DeviceStatus.DeviceStatus_en', name: '@Resources.Store.DeviceStatus' },
                    { field: 'Firmware', name: '@Resources.Store.Firmware' },
                    {
                        name: 'Action', cellTemplate: '<div class="ui-grid-cell-contents ng-binding ng-scope">' +
                            '<button class="btn btn-info btn-xs edit action-edit" ng-click="grid.appScope.edit(row.entity.DeviceId)" ><i class="fa fa-edit"></i>@Resources.Resource.ButtonEdit</button>' +
                            '<button class="btn btn-xs" ng-click="grid.appScope.details(row.entity.DeviceId)"><i class="fa fa-info"></i>@Resources.Resource.ButtonDetails</button>' +
                            '</div>',
                        enableSorting: false, enableFiltering: false
                    }
                ]
                ,
                onRegisterApi: function (gridApi) {
                    $scope.gridApi = gridApi;
                    //$scope.
                    //gridApi.selection.on.rowSelectionChanged($scope, function (row) {
                    //    var msg = 'row selected ' + row.isSelected;
                    //    $log.log(msg);
                    //});

                    //gridApi.selection.on.rowSelectionChangedBatch($scope, function (rows) {
                    //    var msg = 'rows changed ' + rows.length;
                    //    $log.log(msg);
                    //});

                    // interval of zero just to allow the directive to have initialized
                    //$interval(function () {
                    //    gridApi.core.addToGridMenu(gridApi.grid, [{ title: 'Dynamic item', order: 100 }]);
                    //}, 0, 1);
                    gridApi.core.on.columnVisibilityChanged($scope, function (changedColumn) {
                        $scope.columnChanged = { name: changedColumn.colDef.name, visible: changedColumn.colDef.visible };
                    });
                }
            };

            $scope.gridOptions.data = '@Html.Raw(JsonConvert.SerializeObject(this.Model))'
            $scope.gridOptions.selectedItems = [];
           

            $scope.ToggoleGridFilter = function ($event) {
                $scope.gridOptions.enableFiltering = !$scope.gridOptions.enableFiltering;
                $scope.gridApi.core.notifyDataChange(uiGridConstants.dataChange.COLUMN);
            }

            $scope.create = function () {
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: "/device/create",
                    controller: 'DeviceCreateCtrl',
                    scope: $scope,
                    backdrop: false,
                });

                modalInstance.result.then(null, function () { });
            }

            $scope.edit = function (id) {
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: "/Device/edit/" + id,
                    controller: 'DeviceEditCtrl',
                    scope: $scope,
                    backdrop: false,
                });
                modalInstance.result.then(null, function () { });
            }

            $scope.details = function (id) {
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: "/device/details/" + id,
                    controller: 'DeviceDetailsCtrl',
                    scope: $scope,
                    backdrop: false,
                });

                modalInstance.result.then(null, function () { });
            }

            $scope.DeleteItems = function (ev) {

                var modalOptions = {
                    closeButtonText: 'Cancel',
                    actionButtonText: 'Ok',
                    headerText: 'Delete Confirm',
                    bodyText: 'Are you sure to delete selected item(s)?'
                };

                confirmService.showModal({}, modalOptions).then(function (result) {
                    var selectedIds = [];
                    var selectedItems = $scope.gridApi.selection.getSelectedRows();
                    for (i = 0; i < selectedItems.length; i++) {
                        selectedIds.push(selectedItems[i].DeviceId)
                    }

                    alert(selectedIds);
                });
            }

        }]);

        app.controller('DeviceCreateCtrl', ['$scope', '$uibModalInstance', function ($scope, $uibModalInstance) {
            $scope.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };
        }]);

        app.controller('DeviceEditCtrl', ['$scope', '$uibModalInstance', function ($scope, $uibModalInstance) {
            $scope.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };
        }]);

        app.controller('DeviceDetailsCtrl', ['$scope', '$uibModalInstance', function ($scope, $uibModalInstance) {
            $scope.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };
        }]);

        function showImportDilogFile() {
            $('#upload').click();
        }
        function fileChange(obj) {
            var fileName = $(obj).val();
            $('#btnImportExcel').click();
        }




    </script>
}